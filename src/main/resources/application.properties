#spring.h2.console.enabled=true

#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

## paar weitere configs für devmodus (initial db creation per sql script)
# spring.jpa.properties.javax.persistence.schema-generation.create-soure=metadata
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=guru_database_create.sql

## paar weiter example configs für mysql
# spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
# spring.jpa.hibernate.ddl-auto=validate
# spring.jpa.database=mysql
# spring.jpa.show-sql=true


# logging.level.root=WARN
# logging.level.org.springframework.security=DEBUG
# logging.path=/var/logs
# logging.file=SpringBank.log

# my.custom.property
# kann man per @ConfigruationProperties(prefix=my.custom) + Eigenschaft: private int property = 20; (+ setter)
# muss aber nicht am Controller gemacht werden - eher eigene ConfigKlasse schreiben: @Component @ ConfigurationProperties(prefix="my.custom") @Data public class myProperties{ private int property = 20 }
# und dann im Controller Eigenschaft: private myProperties myProps;
